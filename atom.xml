<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逆水行舟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hbiboluo.com/"/>
  <updated>2018-10-24T09:43:12.834Z</updated>
  <id>http://www.hbiboluo.com/</id>
  
  <author>
    <name>hbiboluo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序猿Mac、Linux工具推荐</title>
    <link href="http://www.hbiboluo.com/2018/01/05/productivity/"/>
    <id>http://www.hbiboluo.com/2018/01/05/productivity/</id>
    <published>2018-01-04T16:00:00.000Z</published>
    <updated>2018-10-24T09:43:12.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序猿"><a href="#程序猿" class="headerlink" title="程序猿"></a>程序猿</h1><ul><li><strong>5星</strong> Shadowsocks: 科学上网 </li><li><strong>5星</strong> Spacemacs: Vim + Emacs</li><li><strong>5星</strong> Dash「Mac Only」: 查阅API文档必备，结合<code>Alfred</code>食用效果更佳</li><li><strong>5星</strong> Proxifier「Mac Only」: 应用即使没有Proxy设置依然可以科学上网</li><li><strong>5星</strong> JupyterLab: Python必备</li><li><strong>5星</strong> Tampermonkey: Chrome插件，Hack网页必备</li></ul><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><ul><li><strong>5星</strong> iTerm「Mac Only」: Mac下很爽的终端程序</li><li><strong>5星</strong> oh-my-zsh: 终端增强，自动补全……</li><li><strong>5星</strong> htop: 服务器进程管理小能手</li><li><strong>5星</strong> tmux: 结合<code>oh-my-zsh</code>的插件，<code>ta</code>直接<code>attach</code>到指定会话</li><li><strong>5星</strong> mosh: 长时间连接server必备，断线自动恢复</li><li><strong>5星</strong> tldr: 指令的快速查询手册，Too Long Don’t Read.</li></ul><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><ul><li><strong>5星</strong> Alfred「Mac Only」: 强力推荐</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><strong>6星</strong> <strong>Anki</strong>: 记忆工具，强烈推荐，可多平台同步使用！！！</li><li><strong>5星</strong> 网易云音乐</li><li><strong>5星</strong> <em>脑图工具：MindNode、XMind、FreeMind</em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序猿&quot;&gt;&lt;a href=&quot;#程序猿&quot; class=&quot;headerlink&quot; title=&quot;程序猿&quot;&gt;&lt;/a&gt;程序猿&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5星&lt;/strong&gt; Shadowsocks: 科学上网 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5星&lt;/
      
    
    </summary>
    
      <category term="其他" scheme="http://www.hbiboluo.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="效率" scheme="http://www.hbiboluo.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Xposed快速指南</title>
    <link href="http://www.hbiboluo.com/2017/08/10/quick-start-xposed/"/>
    <id>http://www.hbiboluo.com/2017/08/10/quick-start-xposed/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2018-10-24T09:27:23.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xposed是什么"><a href="#Xposed是什么" class="headerlink" title="Xposed是什么"></a>Xposed是什么</h1><p><a href="https://github.com/rovo89/XposedBridge/wiki" target="_blank" rel="noopener">Xposed</a>是一个动态修改Android运行时的框架。</p><p>“Zygote”进程「Android运行时核心」是在手机启动时由/init.rc脚本启动，由/system/bin/app_process加载所有classes并调用初始化方法。</p><p>而Xposed框架被安装后，一个扩展的<code>app_process</code>会被安装到/system/bin/目录，将添加额外的jar包<code>/data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar</code>到classpath并在指定位置调用方法。<code>XposedBridge</code>进入了类加载的世界，就可以主宰VM了。</p><p><code>XposedBridge</code>中的<code>hookMethodNative</code>方法是Xposed入口，调用<code>handleHookedMethod</code>处理具体逻辑，传递method信息，可以回调注册过该method的hook方法，对参数进行修改，修改运行结果等等。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>开发环境: Android Studio</li></ul><h1 id="Xposed-API精要"><a href="#Xposed-API精要" class="headerlink" title="Xposed API精要"></a>Xposed API精要</h1><p><code>de.robv.android.xposed</code>包下的hook入口：</p><ul><li><code>IXposedHookZygoteInit</code>: Zygote进程初始化Hook，一般Android启动时使用。 </li><li><code>IXposedHookLoadPackage</code>: 应用(Package)加载Hook，一般用于Hook特定应用的一些方法。</li><li><code>IXposedHookInitPackageResources</code>: 当应用加载资源时的Hook. </li></ul><p>而重要的一些方法都在<code>de.robv.android.xposed.XposedHelpers</code>类中，比如提供的<code>findAndHookMethod</code>可以hook方法，其中参数类型：</p><ul><li>Class全限定名</li><li>ClassLoader</li><li>方法名称</li><li>可变长的方法参数类型(class/class全限定名称string)</li><li>Hook逻辑<ul><li><code>de.robv.android.xposed.XC_MethodHook</code>为before/after的hook.</li><li><code>de.robv.android.xposed.XC_MethodReplacement</code>为方法替换hook，可以通过<code>returnConstant</code>方法返回结果，或者使用<code>replaceHookedMethod</code>直接修改。</li></ul></li></ul><p>其中，被Hook的方法参数:</p><ul><li><code>de.robv.android.xposed.XC_MethodHook.MethodHookParam</code> <ul><li><code>setResult</code>和<code>setThrowable</code>方法可以修改返回值，<strong>注意当在before hook执行则跳过执行原方法</strong>。</li><li><code>thisObject</code>可以获得当前对象</li></ul></li></ul><h1 id="Xposed快速开发流程"><a href="#Xposed快速开发流程" class="headerlink" title="Xposed快速开发流程"></a>Xposed快速开发流程</h1><h2 id="第一步：添加Xposed依赖"><a href="#第一步：添加Xposed依赖" class="headerlink" title="第一步：添加Xposed依赖"></a>第一步：添加Xposed依赖</h2><p>已被发布到<a href="https://bintray.com/rovo89/de.robv.android.xposed/api" target="_blank" rel="noopener"><code>Bintray/jCenter</code></a>中, 直接添加一个Gradle dependency即可。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    provided <span class="string">'de.robv.android.xposed:api:82'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第二步-在AndroidManifest-xml添加Xposed模块声明"><a href="#第二步-在AndroidManifest-xml添加Xposed模块声明" class="headerlink" title="第二步: 在AndroidManifest.xml添加Xposed模块声明"></a>第二步: 在AndroidManifest.xml添加Xposed模块声明</h2><p>如下，比较简单，不展开解析：）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"de.robv.android.xposed.mods.tutorial"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposedmodule"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposeddescription"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"Easy example which makes the status bar clock red and adds a smiley"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"xposedminversion"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"53"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三步：编写Xposed-Module代码逻辑"><a href="#第三步：编写Xposed-Module代码逻辑" class="headerlink" title="第三步：编写Xposed Module代码逻辑"></a>第三步：编写Xposed Module代码逻辑</h2><h3 id="1-了解你需要hook的对象"><a href="#1-了解你需要hook的对象" class="headerlink" title="1. 了解你需要hook的对象"></a>1. <strong>了解你需要hook的对象</strong></h3><p>这一步才是真正考验的地方，如果能拿到源码就直接阅读源码吧，以下只讨论通过apk逆向工程的情况。以下步骤可跳着看:)</p><h4 id="获取应用的package-name"><a href="#获取应用的package-name" class="headerlink" title="获取应用的package name"></a>获取应用的package name</h4><p>以下两个方案是从目前运行的app中获取，如果你已经获取了apk，也可以查看AndroidManifest.xml获得：</p><p>方法一：通过adb shell的package manager获取所有package，方便但是仍然得猜<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package</span><br></pre></td></tr></table></figure></p><p>方法二：打开应用后通过adb shell的dumpsys获得当前系统服务数据。请参考文末的参考文档了解具体用法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过window服务</span></span><br><span class="line">adb shell dumpsys window w | grep mCurrentFocus</span><br><span class="line"><span class="comment"># 或者通过activity服务</span></span><br><span class="line">adb shell dumpsys activity | grep -A 5 <span class="string">"Stack #1:"</span> | grep Intent</span><br></pre></td></tr></table></figure></p><h4 id="获取应用的apk包，以便反编译"><a href="#获取应用的apk包，以便反编译" class="headerlink" title="获取应用的apk包，以便反编译"></a>获取应用的apk包，以便反编译</h4><p>这个途径也比较多，直接从应用商店下载也是不错的选项，如果不方便下载的，直接通过pm的<code>list package -f</code>查看，再通过<code>pull</code>从手机端同步apk到PC端。示例，假设我们要获取小米应用商店的apk包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package -f | grep com.xiaomi.market</span><br><span class="line">adb pull /system/app/MiuiSuperMarket/MiuiSuperMarket.apk ~/Downloads/</span><br></pre></td></tr></table></figure><h4 id="反编译apk查看代码理解-略"><a href="#反编译apk查看代码理解-略" class="headerlink" title="反编译apk查看代码理解(略)"></a>反编译apk查看代码理解(略)</h4><p>这一块内容比较杂，可以google一下，mac用户可以使用<a href="https://github.com/Jermic/Android-Crack-Tool" target="_blank" rel="noopener">Android Crack Tool</a>进行反编译。</p><p><img src="https://raw.githubusercontent.com/Jermic/Android-Crack-Tool/master/g1.gif" alt="Android Crack Tool截图"></p><h4 id="阅读反编译后的代码，理解关键逻辑，制定Hook方案"><a href="#阅读反编译后的代码，理解关键逻辑，制定Hook方案" class="headerlink" title="阅读反编译后的代码，理解关键逻辑，制定Hook方案"></a>阅读反编译后的代码，理解关键逻辑，制定Hook方案</h4><p><strong>TODO</strong></p><h3 id="2-编写Hook代码"><a href="#2-编写Hook代码" class="headerlink" title="2. 编写Hook代码"></a>2. 编写Hook代码</h3><p><strong>TODO</strong></p><h2 id="第四步：编写assets-xposed-init，注册Module类"><a href="#第四步：编写assets-xposed-init，注册Module类" class="headerlink" title="第四步：编写assets/xposed_init，注册Module类"></a>第四步：编写assets/xposed_init，注册Module类</h2><p>以便xposed framework了解，每行一个全限定类名即可</p><h2 id="第五步：打包安装，在Framework中启用Module并设置后重启即可"><a href="#第五步：打包安装，在Framework中启用Module并设置后重启即可" class="headerlink" title="第五步：打包安装，在Framework中启用Module并设置后重启即可"></a>第五步：打包安装，在Framework中启用Module并设置后重启即可</h2><p><strong>TODO</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial" target="_blank" rel="noopener">官方Wiki</a></li><li><a href="http://api.xposed.info/reference/packages.html" target="_blank" rel="noopener">API参考文档</a></li><li><a href="https://developer.android.com/studio/command-line/dumpsys.html" target="_blank" rel="noopener">dumpsys的用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Xposed是什么&quot;&gt;&lt;a href=&quot;#Xposed是什么&quot; class=&quot;headerlink&quot; title=&quot;Xposed是什么&quot;&gt;&lt;/a&gt;Xposed是什么&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rovo89/XposedB
      
    
    </summary>
    
      <category term="技术" scheme="http://www.hbiboluo.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="快速指南" scheme="http://www.hbiboluo.com/tags/%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8D%97/"/>
    
      <category term="Android" scheme="http://www.hbiboluo.com/tags/Android/"/>
    
      <category term="Xposed" scheme="http://www.hbiboluo.com/tags/Xposed/"/>
    
  </entry>
  
</feed>
